
#include <ime_dialog.h>
#include <message_dialog.h>
#include <signin_dialog.h>
#include "prx.h"
#include "MessagePipe.h"

#define CASE_ERROR_TO_STRING(errCode) case errCode: errorString = #errCode; break;

namespace UnityCommonDialog
{
	const char* LookupErrorCode(int errorCode)
	{
		static char defaultErrorString[16];
		const char* errorString = NULL;

		switch(errorCode)
		{
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_NOT_SYSTEM_INITIALIZED)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_ALREADY_SYSTEM_INITIALIZED)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_NOT_INITIALIZED)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_ALREADY_INITIALIZED)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_NOT_FINISHED)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_INVALID_STATE)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_RESULT_NONE)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_BUSY)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_OUT_OF_MEMORY)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_PARAM_INVALID)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_NOT_RUNNING)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_ALREADY_CLOSE)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_ARG_NULL)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_UNEXPECTED_FATAL)
			CASE_ERROR_TO_STRING(SCE_COMMON_DIALOG_ERROR_NOT_SUPPORTED)

			CASE_ERROR_TO_STRING(SCE_IME_ERROR_BUSY)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_NOT_OPENED)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_NO_MEMORY)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_CONNECTION_FAILED)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_TOO_MANY_REQUESTS)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_TEXT)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_EVENT_OVERFLOW)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_NOT_ACTIVE)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_IME_SUSPENDING)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_DEVICE_IN_USE)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_USER_ID)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_TYPE)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_SUPPORTED_LANGUAGES)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_ENTER_LABEL)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_INPUT_METHOD)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_OPTION)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_MAX_TEXT_LENGTH)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_INPUT_TEXT_BUFFER)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_POSX)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_POSY)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_HORIZONTAL_ALIGNMENT)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_VERTICAL_ALIGNMENT)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_EXTENDED)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_WORK)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_ARG)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_HANDLER)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_NO_RESOURCE_ID)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_MODE)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_PARAM)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_ADDRESS)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_RESERVED)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INVALID_TIMING)
			CASE_ERROR_TO_STRING(SCE_IME_ERROR_INTERNAL)

			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_NOT_INITIALIZED)
			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_ALREADY_INITIALIZED)
			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_PARAM_INVALID)
			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_UNEXPECTED_FATAL)
			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_INVALID_STATE)
			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_SERVICE_BUSY)
			CASE_ERROR_TO_STRING(SCE_SIGNIN_DIALOG_ERROR_INVALID_USER_ID)


			default:
				sprintf(defaultErrorString, "0x%08x", errorCode);
				errorString = defaultErrorString;
				break;
		}

		return errorString;
	}

	bool GetInitialUser(SceUserServiceUserId* userId)
	{
		int32_t ret = sceUserServiceGetInitialUser(userId);// use default user
		if(ret != SCE_OK)
		{
			Messages::LogError("UnityCommonDialog::%s@L%d - sceUserServiceGetInitialUser returned %s", __FUNCTION__, __LINE__, LookupErrorCode(ret));
			if(ret == SCE_USER_SERVICE_ERROR_OPERATION_NOT_SUPPORTED)
			{
				Messages::LogError("If you have Player Settings>>User Management enabled you need to pass in a valid user (UnityEngine.PS5.PS5Input.LoggedInUser.userId)");
			}
			return false;
		}
		return true;
	}

}	// namespace UnityCommonDialog
